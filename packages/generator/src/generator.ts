import BN from 'bn.js'
import { toWei } from 'web3-utils'

import { F, Fp } from '@zkopru/babyjubjub'
import { DB } from '@zkopru/database'
import { Sum, UtxoStatus, Utxo, RawTx } from '@zkopru/transaction'
import { HDWallet, ZkAccount } from '@zkopru/account'
import { logger, sleep } from '@zkopru/utils'
import {
  ZkWalletAccount,
  ZkWalletAccountConfig,
} from '~zk-wizard/zk-wallet-account'
import { TestTxBuilder } from './testbuilder'

import { logAll } from './generator-utils'

// TODO : extends to other type of assets
export type noteAmount = { eth: string; fee: string }

export interface GeneratorConfig {
  db: DB
  hdWallet: HDWallet
  account: ZkAccount
  noteAmount?: noteAmount
  weiPrice?: string
  ID?: number
}

//* * Only ETH transafer zkTx generator as 1 inflow 2 outflows */
export class TransferGenerator extends ZkWalletAccount {
  ID: number

  activating: boolean

  noteAmount: noteAmount

  unspentUTXO: Utxo[]

  onQueueUTXOSalt: F[]

  weiPrice: string

  worker: Worker | undefined

  lastSalt: Fp

  constructor(config: ZkWalletAccountConfig & GeneratorConfig) {
    super(config)
    this.ID = config.ID ?? Math.floor(Math.random() * 10000) // TODO : It seems only need in docker environment
    this.activating = false
    this.noteAmount = config.noteAmount ?? {
      eth: toWei('0.1'),
      fee: toWei('0.01'),
    }
    this.unspentUTXO = []
    this.onQueueUTXOSalt = []
    this.weiPrice = config.weiPrice ?? toWei('2000', 'gwei')

    /**  
     * Starting with Ether Note generated by deposit tx, It has 1 as salt
    
    the salt will be using a sequence for mass transaction in layer 2 as testing
     
         2 - 4 ...
       /   \  
     1       5 ...
       \     
         3 - 6 ...
           \
             7 ...
    */
    this.lastSalt = Fp.from(1)
  }

  async startGenerator() {
    if (!this.node.isRunning()) {
      this.node.start()
    }

    this.activating = true

    let tx: RawTx
    let sendableUtxo: Utxo[]
    let stagedUtxo

    logger.info(`sending deposit Tx with salt ${this.lastSalt.toString()}`)
    try {
      const result = await this.depositEther(
        this.noteAmount.eth,
        this.noteAmount.fee,
        this.account?.zkAddress,
        this.lastSalt,
      )
      if (!result) {
        throw new Error(' Deposit Transaction Failed!')
      }
    } catch (err) {
      logger.error(err)
    }

    while (this.activating) {
      this.unspentUTXO = await this.getUtxos(this.account, UtxoStatus.UNSPENT)

      // Deposit if does not exist unspent utxo in this wallet
      if (this.unspentUTXO.length === 0) {
        logger.info('No Spendable Utxo, wait until available')
        await sleep(10000)
        continue
      }

      // generate transfer Tx...
      // All transaction are self transaction with same amount, only unique things is salt.
      sendableUtxo = []

      // TODO : refactor this
      for (const utxo of this.unspentUTXO) {
        stagedUtxo = utxo
        for (let i = 0; i < this.onQueueUTXOSalt.length; i++) {
          if (this.onQueueUTXOSalt[i] == utxo.salt) {
            stagedUtxo = null
            break
          }
        }
        if (stagedUtxo) {
          sendableUtxo.push(stagedUtxo) // last utxo always in
        }
        // No need to be find all unspent utxo
        if (sendableUtxo.length >= 1) {
          break
        }
      }

      // TODO : Create Tx then goto queue
      if (sendableUtxo) {
        logger.info(
          `sendable UTXO salts are ${logAll(
            sendableUtxo.map(utxo => utxo.salt.toString()),
          )}`,
        )

        const testTxBuilder = new TestTxBuilder(this.account?.zkAddress!)
        tx = testTxBuilder
          .provide(...sendableUtxo)
          .weiPerByte(this.weiPrice)
          .sendEther({
            eth: Sum.from(sendableUtxo).eth.div(new BN(2)),
            salt: sendableUtxo[0].salt.muln(2),
            to: this.account?.zkAddress!,
          })
          .build()

        const parsedZkTx = {
          inflow: tx.inflow.map(flow => {
            return {
              salt: flow.salt.toString(10),
              eth: flow.eth().toString(10),
            }
          }),
          outflow: tx.outflow.map(flow => {
            return {
              salt: flow.salt.toString(10),
              eth: flow.eth().toString(10),
            }
          }),
        }
        logger.info(`Generated zkTx ${logAll(parsedZkTx)}`)
        try {
          await this.sendTx({
            tx,
            from: this.account,
            encryptTo: this.account?.zkAddress,
          })
          sendableUtxo.forEach(utxo => {
            this.onQueueUTXOSalt.push(utxo.salt)
          })
        } catch (err) {
          logger.error(err)
        }
      }
    }
  }

  stopGenerator() {
    this.activating = false
  }
}
