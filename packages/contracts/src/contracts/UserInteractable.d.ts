/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from './types'

interface EventOptions {
  filter?: object
  fromBlock?: BlockType
  topics?: string[]
}

export type Deposit = ContractEventLog<{
  queuedAt: string
  note: string
  fee: string
  0: string
  1: string
  2: string
}>
export type OwnershipTransferred = ContractEventLog<{
  previousOwner: string
  newOwner: string
  0: string
  1: string
}>

export interface UserInteractable extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions,
  ): UserInteractable
  clone(): UserInteractable
  methods: {
    CHALLENGE_PERIOD(): NonPayableTransactionObject<string>

    MAX_BLOCK_SIZE(): NonPayableTransactionObject<string>

    MAX_UTXO(): NonPayableTransactionObject<string>

    MAX_VALIDATION_GAS(): NonPayableTransactionObject<string>

    MAX_WITHDRAWAL(): NonPayableTransactionObject<string>

    MINIMUM_STAKE(): NonPayableTransactionObject<string>

    NULLIFIER_TREE_DEPTH(): NonPayableTransactionObject<string>

    RANGE_LIMIT(): NonPayableTransactionObject<string>

    REF_DEPTH(): NonPayableTransactionObject<string>

    SNARK_FIELD(): NonPayableTransactionObject<string>

    UTXO_SUB_TREE_DEPTH(): NonPayableTransactionObject<string>

    UTXO_SUB_TREE_SIZE(): NonPayableTransactionObject<string>

    UTXO_TREE_DEPTH(): NonPayableTransactionObject<string>

    WITHDRAWAL_SUB_TREE_DEPTH(): NonPayableTransactionObject<string>

    WITHDRAWAL_SUB_TREE_SIZE(): NonPayableTransactionObject<string>

    WITHDRAWAL_TREE_DEPTH(): NonPayableTransactionObject<string>

    allowedMigrants(arg0: string): NonPayableTransactionObject<boolean>

    consensusProvider(): NonPayableTransactionObject<string>

    /**
     * Returns the address of the current owner.
     */
    owner(): NonPayableTransactionObject<string>

    proxied(arg0: string | number[]): NonPayableTransactionObject<string>

    /**
     * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
     */
    renounceOwnership(): NonPayableTransactionObject<void>

    /**
     * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
     */
    transferOwnership(newOwner: string): NonPayableTransactionObject<void>

    validators(arg0: string | number[]): NonPayableTransactionObject<string>

    /**
     * Users can use zkopru network by submitting a new homomorphically hiden note.
     * @param amount Amount of ERC20 when the token param is defined and it is an ERC20
     * @param eth Amount of Ether to deposit
     * @param fee Amount of fee to give to the coordinator
     * @param nft NFT id when the token param is defined and it is an ERC721
     * @param salt 254bit salt for the privacy
     * @param spendingPubKey P = poseidon(p*G, N) https://github.com/zkopru-network/zkopru/issues/34#issuecomment-666988505
     * @param token Token address of ERC20 or ERC721. It can be undefined.
     */
    deposit(
      spendingPubKey: number | string | BN,
      salt: number | string | BN,
      eth: number | string | BN,
      token: string,
      amount: number | string | BN,
      nft: number | string | BN,
      fee: number | string | BN,
    ): PayableTransactionObject<void>

    /**
     * IERC721Receiver implementation. Adds support for safeTransfer.*
     */
    onERC721Received(
      operator: string,
      from: string,
      tokenId: number | string | BN,
      data: string | number[],
    ): NonPayableTransactionObject<string>

    /**
     * Users can withdraw notes when only after they're finazlied.
     * @param amount Amount of ERC20 when the token param is defined and it is an ERC20
     * @param blockHash Finalized block hash to find the finalized withdrawal root
     * @param callerFee Amount of fee to give to the caller. This can be used when the withdrawer account has no ETH.
     * @param eth Amount of Ether to withdraw out
     * @param leafIndex The index of your withdrawal note's leaf in the given tree.
     * @param nft NFT id when the token param is defined and it is an ERC721
     * @param note Note hash in layer 2. It is a poseidon hash
     * @param owner The original owner's address of the note
     * @param siblings Inclusion proof data
     * @param token Token address of ERC20 or ERC721. It can be undefined.
     */
    withdraw(
      note: number | string | BN,
      owner: string,
      eth: number | string | BN,
      token: string,
      amount: number | string | BN,
      nft: number | string | BN,
      callerFee: number | string | BN,
      blockHash: string | number[],
      leafIndex: number | string | BN,
      siblings: (number | string | BN)[],
    ): NonPayableTransactionObject<void>

    payInAdvance(
      note: number | string | BN,
      publicData: [
        string,
        number | string | BN,
        string,
        number | string | BN,
        number | string | BN,
        number | string | BN,
      ],
      prepayRequest: [
        string,
        string | number[],
        number | string | BN,
        number | string | BN,
        number | string | BN,
      ],
      signature: string | number[],
    ): PayableTransactionObject<void>
  }
  events: {
    Deposit(cb?: Callback<Deposit>): EventEmitter
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter

    OwnershipTransferred(cb?: Callback<OwnershipTransferred>): EventEmitter
    OwnershipTransferred(
      options?: EventOptions,
      cb?: Callback<OwnershipTransferred>,
    ): EventEmitter

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
  }

  once(event: 'Deposit', cb: Callback<Deposit>): void
  once(event: 'Deposit', options: EventOptions, cb: Callback<Deposit>): void

  once(event: 'OwnershipTransferred', cb: Callback<OwnershipTransferred>): void
  once(
    event: 'OwnershipTransferred',
    options: EventOptions,
    cb: Callback<OwnershipTransferred>,
  ): void
}
